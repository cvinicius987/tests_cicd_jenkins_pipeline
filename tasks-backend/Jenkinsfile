pipeline {
    agent any
    stages {
        stage ('Build'){
            steps{
                bat 'mvn clean package -DskipTests=true'
            }
        }
        stage ('Unit Tests'){
            steps{
                bat 'mvn test'
            }
        }
        stage ('Sonar Analysis'){
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps{
                withSonarQubeEnv('SONAR_LOCAL'){
                    bat "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=DeployBack -Dsonar.host.url=http://localhost:9000 -Dsonar.login=7de151120652c35346121f5ef0650d1a609ea956 -Dsonar.java.binaries=target -Dsonar.coverege.exclusions=**/mvn/**,**/src/test/**,**/model/**,**/Aplication.java" 
                }
            }
        }
        stage ('Deploy Backend'){
            steps{
                deploy adapters: [tomcat8(credentialsId: 'tomcat_admin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks-backend', war: 'target/tasks-backend.war'
            }
        }

        stage ('API Tests'){
            steps{
                dir('api-test') {
                    git credentialsId: 'github_login', url: 'https://github.com/cvinicius987/tasks-backend-test.git'
                    bat 'mvn test'
                }
            }
        }
        stage ('Deploy FrontEnd'){
            steps{
                dir('frontend') {
                    git credentialsId: 'github_login', url: 'https://github.com/cvinicius987/tasks-frontend.git'
                    bat 'mvn clean package'
                    deploy adapters: [tomcat8(credentialsId: 'tomcat_admin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks', war: 'target/tasks.war'
                }
            }
        }
        stage ('Functional Tests'){
            steps{
                dir('functional-test') {
                    git credentialsId: 'github_login', url: 'https://github.com/cvinicius987/tasks-functional-test.git'
                    bat 'mvn test'
                }
            }
        }
        stage ('Build Docker Images'){
            steps{
                bat 'docker-compose build'
            }
        }
        stage ('Deploy Prod'){
            steps{
                bat 'docker-compose up -d'
            }
        }
        stage ('Health Check'){
            steps{
            	sleep(20)
                dir('functional-test') {
                    bat 'mvn verify -Dskip.surefire.tests'
                }
            }
        }
    }
    post {
    	always{
    		junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml, api-test/target/surefire-reports/*.xml, functional-test/target/surefire-reports/*.xml, functional-test/target/failsafe-reports/*.xml'
    		archiveArtifacts artifacts: 'target/tasks-backend.war, frontend/target/tasks.war', onlyIfSuccessful: true
    	}
    }
}